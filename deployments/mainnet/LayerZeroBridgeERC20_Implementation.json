{
  "address": "0xD7134e2265B78DFCF4e9FA4DC65b18F4D5C03220",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEndpoint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernor",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotGovernorOrGuardian",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canonicalToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coreBorrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_useZro",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "zroFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_coreBorrow",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_canonicalToken",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pause",
          "type": "bool"
        }
      ],
      "name": "pauseSendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "sendCredit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_toAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_refundAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_zroPaymentAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "sendWithPermit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "withdrawFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02da2c9ee5abb4865451a5f79ec391378273aa043c5b5706516071672f09724e",
  "receipt": {
    "to": null,
    "from": "0xfdA462548Ce04282f4B6D6619823a7C64Fdc0185",
    "contractAddress": "0xD7134e2265B78DFCF4e9FA4DC65b18F4D5C03220",
    "transactionIndex": 123,
    "gasUsed": "2800302",
    "logsBloom": "0x
    "blockHash": "0xd5ec1e32e665eb9f777f98c6be925e02df9dc96d0f9274b5c87814abb335387b",
    "transactionHash": "0x02da2c9ee5abb4865451a5f79ec391378273aa043c5b5706516071672f09724e",
    "logs": [],
    "blockNumber": 15938264,
    "cumulativeGasUsed": "17512751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df0edfdf1a2dc083cb4f7726ee89e57b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEndpoint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernor\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotGovernorOrGuardian\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canonicalToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coreBorrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_useZro\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"zroFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_coreBorrow\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_canonicalToken\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pause\",\"type\":\"bool\"}],\"name\":\"pauseSendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"sendCredit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_toAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_refundAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zroPaymentAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"sendWithPermit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdrawFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Angle Labs, Inc., forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"params\":{\"_adapterParams\":\"flexible bytes array to indicate messaging adapter services in L0\",\"_amount\":\"amount of the tokens to transfer\",\"_dstChainId\":\"L0 defined chain id to send tokens too\",\"_toAddress\":\"dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\",\"_useZro\":\"indicates to use zro to pay L0 fees\"}},\"initialize(string,address,address,address)\":{\"params\":{\"_coreBorrow\":\"Address of the `CoreBorrow` contract used for access control\",\"_lzEndpoint\":\"Layer zero endpoint to pass messages\",\"_name\":\"Name of the token corresponding to this contract\"}},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"details\":\"public for the needs of try / catch but effectively internal\",\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"pauseSendTokens(bool)\":{\"params\":{\"pause\":\"Future pause status\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"params\":{\"_nonce\":\"Nounce of the message\",\"_payload\":\"Data: recipient address and amount\",\"_srcAddress\":\"Sender of the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"params\":{\"_adapterParams\":\"is a flexible bytes array to indicate messaging adapter services\",\"_amount\":\"the quantity of tokens in wei\",\"_dstChainId\":\"the destination chain identifier\",\"_refundAddress\":\"the address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"set to address(0x0) if not paying in ZRO (LayerZero Token)\"}},\"sendCredit(uint16,bytes,uint256,address,address,bytes)\":{\"params\":{\"_adapterParams\":\"is a flexible bytes array to indicate messaging adapter services\",\"_amount\":\"the quantity of credit to send in wei\",\"_dstChainId\":\"the destination chain identifier\",\"_refundAddress\":\"the address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"set to address(0x0) if not paying in ZRO (LayerZero Token)\"}},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"details\":\"The `v`, `r`, and `s` parameters are used as signature data\",\"params\":{\"_adapterParams\":\"Flexible bytes array to indicate messaging adapter services\",\"_amount\":\"Quantity of tokens in wei\",\"_dstChainId\":\"The destination chain identifier\",\"_refundAddress\":\"Address LayerZero refunds if too much message fee is sent\",\"_toAddress\":\"Can be any size depending on the `dstChainId`.\",\"_zroPaymentAddress\":\"Set to address(0x0) if not paying in ZRO (LayerZero Token)\",\"deadline\":\"Deadline parameter for the signature to be valid\"}},\"setTrustedRemote(uint16,bytes)\":{\"details\":\"Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.\",\"params\":{\"_srcAddress\":\"Address on the source chain\",\"_srcChainId\":\"ChainId of the source chain - LayerZero standard\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"sweep(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw from balance\",\"recipient\":\"Address to withdraw from\"}},\"withdraw(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address to send the canonical token to\"},\"returns\":{\"_0\":\"The amount of canonical token sent\"}},\"withdrawFor(uint256,address)\":{\"params\":{\"amount\":\"Amount to withdraw\",\"recipient\":\"Address to withdraw for\"},\"returns\":{\"_0\":\"The amount of canonical token sent\"}}},\"title\":\"LayerZeroBridgeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Maps an address to the amount of token bridged but not received\"},\"canonicalToken()\":{\"notice\":\"Address of the bridgeable token\"},\"coreBorrow()\":{\"notice\":\"Reference to the `CoreBorrow` contract to fetch access control\"},\"estimateSendFee(uint16,bytes,uint256,bool,bytes)\":{\"notice\":\"Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\"},\"failedMessages(uint16,bytes,uint64)\":{\"notice\":\"Maps chainIds to failed messages to retry them\"},\"forceResumeReceive(uint16,bytes)\":{\"notice\":\"Unpauses the receive functionalities\"},\"getConfig(uint16,uint16,address,uint256)\":{\"notice\":\"Fetches the default LZ config\"},\"initialize(string,address,address,address)\":{\"notice\":\"Initializes the contract\"},\"isTrustedRemote(uint16,bytes)\":{\"notice\":\"Checks if the `_srcAddress` corresponds to the trusted source\"},\"lzEndpoint()\":{\"notice\":\"Layer Zero endpoint\"},\"lzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Receives a message from the LZ endpoint and process it\"},\"name()\":{\"notice\":\"Name of the contract for indexing purposes\"},\"nonblockingLzReceive(uint16,bytes,uint64,bytes)\":{\"notice\":\"Handles message receptions in a non blocking way\"},\"pauseSendTokens(bool)\":{\"notice\":\"Pauses bridging through the contract\"},\"retryMessage(uint16,bytes,uint64,bytes)\":{\"notice\":\"Retries a message that previously failed and was stored\"},\"send(uint16,bytes,uint256,address,address,bytes)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"sendCredit(uint16,bytes,uint256,address,address,bytes)\":{\"notice\":\"Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)\"},\"sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\"},\"setConfig(uint16,uint16,uint256,bytes)\":{\"notice\":\"Overrides the default LZ config\"},\"setReceiveVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setSendVersion(uint16)\":{\"notice\":\"Overrides the default LZ config\"},\"setTrustedRemote(uint16,bytes)\":{\"notice\":\"Sets the corresponding address on an other chain.\"},\"sweep(uint256,address)\":{\"notice\":\"Decreases the balance of an address\"},\"trustedRemoteLookup(uint16)\":{\"notice\":\"Maps chainIds to their OFT address\"},\"withdraw(uint256,address)\":{\"notice\":\"Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\"},\"withdrawFor(uint256,address)\":{\"notice\":\"Withdraws amount of `token` from the contract and sends it to the recipient\"}},\"notice\":\"Contract to be deployed on Ethereum for bridging an ERC20 token (ANGLE for instance) using a bridge intermediate token and LayerZero\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol\":\"LayerZeroBridgeERC20\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./utils/OFTCoreERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\n/// @title LayerZeroBridgeERC20\\n/// @author Angle Labs, Inc., forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol\\n/// @notice Contract to be deployed on Ethereum for bridging an ERC20 token (ANGLE for instance) using\\n/// a bridge intermediate token and LayerZero\\ncontract LayerZeroBridgeERC20 is OFTCoreERC20, PausableUpgradeable {\\n    /// @notice Name of the contract for indexing purposes\\n    string public name;\\n\\n    /// @notice Address of the bridgeable token\\n    IERC20 public canonicalToken;\\n\\n    /// @notice Maps an address to the amount of token bridged but not received\\n    mapping(address => uint256) public balanceOf;\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    /// @notice Initializes the contract\\n    /// @param _name Name of the token corresponding to this contract\\n    /// @param _lzEndpoint Layer zero endpoint to pass messages\\n    /// @param _coreBorrow Address of the `CoreBorrow` contract used for access control\\n    function initialize(\\n        string memory _name,\\n        address _lzEndpoint,\\n        address _coreBorrow,\\n        IERC20 _canonicalToken\\n    ) external initializer {\\n        if (address(_canonicalToken) == address(0)) revert ZeroAddress();\\n        __LzAppUpgradeable_init(_lzEndpoint, _coreBorrow);\\n        name = _name;\\n        canonicalToken = _canonicalToken;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() initializer {}\\n\\n    // ===================== EXTERNAL PERMISSIONLESS FUNCTIONS =====================\\n\\n    /// @inheritdoc OFTCoreERC20\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable override {\\n        IERC20Permit(address(canonicalToken)).permit(msg.sender, address(this), _amount, deadline, v, r, s);\\n        send(_dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    /// @inheritdoc OFTCoreERC20\\n    function withdraw(uint256 amount, address recipient) external override returns (uint256) {\\n        return _withdraw(amount, msg.sender, recipient);\\n    }\\n\\n    /// @notice Withdraws amount of `token` from the contract and sends it to the recipient\\n    /// @param amount Amount to withdraw\\n    /// @param recipient Address to withdraw for\\n    /// @return The amount of canonical token sent\\n    function withdrawFor(uint256 amount, address recipient) external returns (uint256) {\\n        return _withdraw(amount, recipient, recipient);\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Withdraws `amount` from the balance of the `from` address and sends these tokens to the `to` address\\n    /// @dev It's important to make sure that `from` is either the `msg.sender` or that `from` and `to` are the same\\n    /// addresses\\n    function _withdraw(\\n        uint256 amount,\\n        address from,\\n        address to\\n    ) internal whenNotPaused returns (uint256) {\\n        balanceOf[from] = balanceOf[from] - amount; // Will overflow if the amount is too big\\n        canonicalToken.transfer(to, amount);\\n        return amount;\\n    }\\n\\n    /// @inheritdoc OFTCoreERC20\\n    function _debitFrom(\\n        uint16,\\n        bytes memory,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        // No need to use safeTransferFrom as we know this implementation reverts on failure\\n        canonicalToken.transferFrom(msg.sender, address(this), _amount);\\n        return _amount;\\n    }\\n\\n    /// @inheritdoc OFTCoreERC20\\n    function _debitCreditFrom(\\n        uint16,\\n        bytes memory,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        balanceOf[msg.sender] -= _amount;\\n        return _amount;\\n    }\\n\\n    /// @inheritdoc OFTCoreERC20\\n    function _creditTo(\\n        uint16,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal override whenNotPaused returns (uint256) {\\n        // Should never revert as all the LayerZero bridge tokens come from\\n        // this contract\\n        uint256 balance = canonicalToken.balanceOf(address(this));\\n        if (balance < _amount) {\\n            balanceOf[_toAddress] = _amount - balance;\\n            if (balance > 0) canonicalToken.transfer(_toAddress, balance);\\n        } else {\\n            canonicalToken.transfer(_toAddress, _amount);\\n        }\\n        return _amount;\\n    }\\n\\n    // =============================== VIEW FUNCTIONS ==============================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Pauses bridging through the contract\\n    /// @param pause Future pause status\\n    function pauseSendTokens(bool pause) external onlyGovernorOrGuardian {\\n        pause ? _pause() : _unpause();\\n    }\\n\\n    /// @notice Decreases the balance of an address\\n    /// @param amount Amount to withdraw from balance\\n    /// @param recipient Address to withdraw from\\n    function sweep(uint256 amount, address recipient) external onlyGovernorOrGuardian {\\n        balanceOf[recipient] = balanceOf[recipient] - amount; // Will overflow if the amount is too big\\n    }\\n\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x6b6537b74418f200451e2ddfaaf67c4d064a5a78eab96e63f7abb7323264d4c8\",\"license\":\"GPL-3.0\"},\"contracts/bridgeERC20/layerZero/utils/NonblockingLzAppERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroReceiver.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../../../interfaces/ICoreBorrow.sol\\\";\\n\\n/// @title NonblockingLzAppERC20\\n/// @author Angle Labs, Inc., forked from https://github.com/LayerZero-Labs/solidity-examples/\\n/// @notice Base contract for bridging an ERC20 token using LayerZero\\nabstract contract NonblockingLzAppERC20 is Initializable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    /// @notice Layer Zero endpoint\\n    ILayerZeroEndpoint public lzEndpoint;\\n\\n    /// @notice Maps chainIds to failed messages to retry them\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    /// @notice Maps chainIds to their OFT address\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n\\n    /// @notice Reference to the `CoreBorrow` contract to fetch access control\\n    address public coreBorrow;\\n\\n    // =================================== EVENTS ==================================\\n\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\n\\n    // =================================== ERRORS ==================================\\n\\n    error NotGovernor();\\n    error NotGovernorOrGuardian();\\n    error InvalidEndpoint();\\n    error InvalidSource();\\n    error InvalidCaller();\\n    error InvalidPayload();\\n    error ZeroAddress();\\n\\n    // ================================ CONSTRUCTOR ================================\\n\\n    //solhint-disable-next-line\\n    function __LzAppUpgradeable_init(address _endpoint, address _coreBorrow) internal {\\n        if (_endpoint == address(0) || _coreBorrow == address(0)) revert ZeroAddress();\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n        coreBorrow = _coreBorrow;\\n    }\\n\\n    // ================================= MODIFIERS =================================\\n\\n    /// @notice Checks whether the `msg.sender` has the governor role or the guardian role\\n    modifier onlyGovernorOrGuardian() {\\n        if (!ICoreBorrow(coreBorrow).isGovernorOrGuardian(msg.sender)) revert NotGovernorOrGuardian();\\n        _;\\n    }\\n\\n    // ===================== EXTERNAL PERMISSIONLESS FUNCTIONS =====================\\n\\n    /// @notice Receives a message from the LZ endpoint and process it\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        if (msg.sender != address(lzEndpoint)) revert InvalidEndpoint();\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        if (_srcAddress.length != trustedRemote.length || keccak256(_srcAddress) != keccak256(trustedRemote))\\n            revert InvalidSource();\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Retries a message that previously failed and was stored\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function retryMessage(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        if (payloadHash == bytes32(0) || keccak256(_payload) != payloadHash) revert InvalidPayload();\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    /// @dev public for the needs of try / catch but effectively internal\\n    function nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) public virtual {\\n        // only internal transaction\\n        if (msg.sender != address(this)) revert InvalidCaller();\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    /// @notice Handles message receptions in a non blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual;\\n\\n    /// @notice Handles message receptions in a blocking way\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Sender of the source chain\\n    /// @param _nonce Nounce of the message\\n    /// @param _payload Data: recipient address and amount\\n    function _blockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal {\\n        // try-catch all errors/exceptions\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\n            // do nothing\\n        } catch {\\n            // error / exception\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\n        }\\n    }\\n\\n    /// @notice Sends a message to the LZ endpoint and process it\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _payload Data: recipient address and amount\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services in L0\\n    function _lzSend(\\n        uint16 _dstChainId,\\n        bytes memory _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        if (trustedRemote.length == 0) revert InvalidSource();\\n        //solhint-disable-next-line\\n        lzEndpoint.send{ value: msg.value }(\\n            _dstChainId,\\n            trustedRemote,\\n            _payload,\\n            _refundAddress,\\n            _zroPaymentAddress,\\n            _adapterParams\\n        );\\n    }\\n\\n    // ============================ GOVERNANCE FUNCTIONS ===========================\\n\\n    /// @notice Sets the corresponding address on an other chain.\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _srcAddress Address on the source chain\\n    /// @dev Used for both receiving and sending message\\n    /// @dev There can only be one trusted source per chain\\n    /// @dev Allows owner to set it multiple times.\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyGovernorOrGuardian {\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\n    }\\n\\n    /// @notice Fetches the default LZ config\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address,\\n        uint256 _configType\\n    ) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setSendVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    /// @notice Overrides the default LZ config\\n    function setReceiveVersion(uint16 _version) external override onlyGovernorOrGuardian {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    /// @notice Unpauses the receive functionalities\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)\\n        external\\n        override\\n        onlyGovernorOrGuardian\\n    {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // =============================== VIEW FUNCTIONS ==============================\\n\\n    /// @notice Checks if the `_srcAddress` corresponds to the trusted source\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x0ba0423216272aace5f558ab0c8cee8f50efaa9d9e7e7754c97989e26b00921e\",\"license\":\"GPL-3.0\"},\"contracts/bridgeERC20/layerZero/utils/OFTCoreERC20.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"./NonblockingLzAppERC20.sol\\\";\\nimport \\\"../../../interfaces/external/layerZero/IOFTCore.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\n\\n/// @title OFTCoreERC20\\n/// @author Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFTCore.sol\\n/// but with slight modifications to add return values to the `_creditTo` and `_debitFrom` functions\\n/// @notice Base contract for bridging using LayerZero\\nabstract contract OFTCoreERC20 is NonblockingLzAppERC20, ERC165Upgradeable, IOFTCore {\\n    // ===================== EXTERNAL PERMISSIONLESS FUNCTIONS =====================\\n\\n    /// @inheritdoc IOFTCore\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public payable virtual;\\n\\n    /// @inheritdoc IOFTCore\\n    function send(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) public payable virtual {\\n        _amount = _debitFrom(_dstChainId, _toAddress, _amount);\\n\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(msg.sender, _dstChainId, _toAddress, _amount, nonce);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function sendCredit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) public payable virtual {\\n        _amount = _debitCreditFrom(_dstChainId, _toAddress, _amount);\\n\\n        _send(_dstChainId, _toAddress, _amount, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function withdraw(uint256 amount, address recipient) external virtual returns (uint256);\\n\\n    // ============================= INTERNAL FUNCTIONS ============================\\n\\n    /// @notice Internal function to send `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of tokens in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    /// @dev Accounting and checks should be performed beforehand\\n    function _send(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams\\n    ) internal {\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        _lzSend(_dstChainId, payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n\\n        uint64 nonce = lzEndpoint.getOutboundNonce(_dstChainId, address(this));\\n        emit SendToChain(msg.sender, _dstChainId, _toAddress, _amount, nonce);\\n    }\\n\\n    /// @inheritdoc NonblockingLzAppERC20\\n    function _nonblockingLzReceive(\\n        uint16 _srcChainId,\\n        bytes memory _srcAddress,\\n        uint64 _nonce,\\n        bytes memory _payload\\n    ) internal virtual override {\\n        // decode and load the toAddress\\n        (bytes memory toAddressBytes, uint256 amount) = abi.decode(_payload, (bytes, uint256));\\n        address toAddress;\\n        //solhint-disable-next-line\\n        assembly {\\n            toAddress := mload(add(toAddressBytes, 20))\\n        }\\n        amount = _creditTo(_srcChainId, toAddress, amount);\\n\\n        emit ReceiveFromChain(_srcChainId, _srcAddress, toAddress, amount, _nonce);\\n    }\\n\\n    /// @notice Makes accountability when bridging from this contract using canonical token\\n    /// @param _dstChainId ChainId of the destination chain - LayerZero standard\\n    /// @param _toAddress Recipient on the destination chain\\n    /// @param _amount Amount to bridge\\n    function _debitFrom(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    /// @notice Makes accountability when bridging from this contract's credit\\n    /// @param _dstChainId ChainId of the destination chain - LayerZero standard\\n    /// @param _toAddress Recipient on the destination chain\\n    /// @param _amount Amount to bridge\\n    function _debitCreditFrom(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    /// @notice Makes accountability when bridging to this contract\\n    /// @param _srcChainId ChainId of the source chain - LayerZero standard\\n    /// @param _toAddress Recipient on this chain\\n    /// @param _amount Amount to bridge\\n    function _creditTo(\\n        uint16 _srcChainId,\\n        address _toAddress,\\n        uint256 _amount\\n    ) internal virtual returns (uint256);\\n\\n    // =============================== VIEW FUNCTIONS ==============================\\n\\n    /// @inheritdoc ERC165Upgradeable\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165Upgradeable, IERC165)\\n        returns (bool)\\n    {\\n        return interfaceId == type(IOFTCore).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IOFTCore\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes memory _adapterParams\\n    ) public view virtual override returns (uint256 nativeFee, uint256 zroFee) {\\n        // mock the payload for send()\\n        bytes memory payload = abi.encode(_toAddress, _amount);\\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\\n    }\\n\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xef8ea64e83ca0bb4e124c3fc4ed0de19b09ce9c987cf333540fe542183381ef6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ICoreBorrow.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\n/// @title ICoreBorrow\\n/// @author Angle Core Team\\n/// @notice Interface for the `CoreBorrow` contract\\n/// @dev This interface only contains functions of the `CoreBorrow` contract which are called by other contracts\\n/// of this module\\ninterface ICoreBorrow {\\n    /// @notice Checks if an address corresponds to a treasury of a stablecoin with a flash loan\\n    /// module initialized on it\\n    /// @param treasury Address to check\\n    /// @return Whether the address has the `FLASHLOANER_TREASURY_ROLE` or not\\n    function isFlashLoanerTreasury(address treasury) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GOVERNOR_ROLE` or not\\n    function isGovernor(address admin) external view returns (bool);\\n\\n    /// @notice Checks whether an address is governor or a guardian of the Angle Protocol or not\\n    /// @param admin Address to check\\n    /// @return Whether the address has the `GUARDIAN_ROLE` or not\\n    /// @dev Governance should make sure when adding a governor to also give this governor the guardian\\n    /// role by calling the `addGovernor` function\\n    function isGovernorOrGuardian(address admin) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x25b65b3f506ca91745a444502a36f0556585d82d9d60f4bd32fbcaabc12840d4\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _destination,\\n        bytes calldata _payload,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        address _dstAddress,\\n        uint64 _nonce,\\n        uint256 _gasLimit,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(\\n        uint16 _dstChainId,\\n        address _userApplication,\\n        bytes calldata _payload,\\n        bool _payInZRO,\\n        bytes calldata _adapterParam\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        bytes calldata _payload\\n    ) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        address _userApplication,\\n        uint256 _configType\\n    ) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0x433c4c79740266e050ab302e93607958252e29c30f0aefbf5ed8d413b06d57ce\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(\\n        uint16 _srcChainId,\\n        bytes calldata _srcAddress,\\n        uint64 _nonce,\\n        bytes calldata _payload\\n    ) external;\\n}\\n\",\"keccak256\":\"0x755c937271fc1344bbbe7da5d43b96a3905793780a0192f5fcfcf64b430920c3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(\\n        uint16 _version,\\n        uint16 _chainId,\\n        uint256 _configType,\\n        bytes calldata _config\\n    ) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0x5a6ffb23ced64f389eb3181bd7845d8cd00b8e573edccdf440d94b2e63a178b6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/layerZero/IOFTCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n * @dev Forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/IOFTCore.sol\\n */\\ninterface IOFTCore is IERC165 {\\n    /// @notice Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId L0 defined chain id to send tokens too\\n    /// @param _toAddress dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n    /// @param _amount amount of the tokens to transfer\\n    /// @param _useZro indicates to use zro to pay L0 fees\\n    /// @param _adapterParams flexible bytes array to indicate messaging adapter services in L0\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint256 nativeFee, uint256 zroFee);\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of tokens in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    function send(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /// @notice Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId the destination chain identifier\\n    /// @param _toAddress can be any size depending on the `dstChainId`.\\n    /// @param _amount the quantity of credit to send in wei\\n    /// @param _refundAddress the address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams is a flexible bytes array to indicate messaging adapter services\\n    function sendCredit(\\n        uint16 _dstChainId,\\n        bytes calldata _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes calldata _adapterParams\\n    ) external payable;\\n\\n    /// @notice Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)\\n    /// @param _dstChainId The destination chain identifier\\n    /// @param _toAddress Can be any size depending on the `dstChainId`.\\n    /// @param _amount Quantity of tokens in wei\\n    /// @param _refundAddress Address LayerZero refunds if too much message fee is sent\\n    /// @param _zroPaymentAddress Set to address(0x0) if not paying in ZRO (LayerZero Token)\\n    /// @param _adapterParams Flexible bytes array to indicate messaging adapter services\\n    /// @param deadline Deadline parameter for the signature to be valid\\n    /// @dev The `v`, `r`, and `s` parameters are used as signature data\\n    function sendWithPermit(\\n        uint16 _dstChainId,\\n        bytes memory _toAddress,\\n        uint256 _amount,\\n        address payable _refundAddress,\\n        address _zroPaymentAddress,\\n        bytes memory _adapterParams,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external payable;\\n\\n    /// @notice Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient\\n    /// @param amount Amount to withdraw\\n    /// @param recipient Address to send the canonical token to\\n    /// @return The amount of canonical token sent\\n    function withdraw(uint256 amount, address recipient) external returns (uint256);\\n\\n    /// @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\\n    /// `_nonce` is the outbound nonce\\n    event SendToChain(\\n        address indexed _sender,\\n        uint16 indexed _dstChainId,\\n        bytes indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n\\n    /// @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\\n    /// `_nonce` is the inbound nonce.\\n    event ReceiveFromChain(\\n        uint16 indexed _srcChainId,\\n        bytes indexed _srcAddress,\\n        address indexed _toAddress,\\n        uint256 _amount,\\n        uint64 _nonce\\n    );\\n}\\n\\n/// @dev Interface of the OFT standard\\ninterface IOFT is IOFTCore, IERC20 {\\n\\n}\\n\",\"keccak256\":\"0x66aa10e5312f46961a8030fba1fe53f5a536b00f0a3b77b0e5da3b62fa84dfeb\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b62000039620000de565b620000a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff16158015620000c4576000805461ffff19166101011790555b8015620000d7576000805461ff00191690555b5062000102565b6000620000f630620000fc60201b620018871760201c565b15905090565b3b151590565b61319480620001126000396000f3fe6080604052600436106101b55760003560e01c806366ad5c8a116100ec578063ceb76b551161008a578063eed33cef11610064578063eed33cef14610555578063f187892214610568578063f34822b414610588578063f5ecbdbc146105a857600080fd5b8063ceb76b55146104f5578063d1deba1f14610522578063eb8d72b71461053557600080fd5b806385edd8ae116100c657806385edd8ae1461046f578063b353aaa714610482578063cbed8b9c146104b5578063cbf9b84b146104d557600080fd5b806366ad5c8a1461040257806370a08231146104225780637533d7881461044f57600080fd5b80631b0c24d5116101595780633d8b38f6116101335780633d8b38f61461035b57806342d65a8d1461037b5780635b8c41e61461039b5780635c975abb146103ea57600080fd5b80631b0c24d5146102b45780632a205e3d146103065780633576f6cc1461033b57600080fd5b806306fdde031161019557806306fdde031461023f57806307e0db171461026157806310ddb1371461028157806310f95825146102a157600080fd5b80621d3567146101ba578062f714ce146101dc57806301ffc9a71461020f575b600080fd5b3480156101c657600080fd5b506101da6101d536600461271c565b6105c8565b005b3480156101e857600080fd5b506101fc6101f73660046127d2565b610726565b6040519081526020015b60405180910390f35b34801561021b57600080fd5b5061022f61022a366004612802565b61073a565b6040519015158152602001610206565b34801561024b57600080fd5b50610254610796565b60405161020691906128ba565b34801561026d57600080fd5b506101da61027c3660046128cd565b610824565b34801561028d57600080fd5b506101da61029c3660046128cd565b610975565b6101da6102af3660046128e8565b610a9c565b3480156102c057600080fd5b506003546102e19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b34801561031257600080fd5b5061032661032136600461299c565b610abf565b60408051928352602083019190915201610206565b34801561034757600080fd5b506101fc6103563660046127d2565b610bb7565b34801561036757600080fd5b5061022f610376366004612a78565b610bc4565b34801561038757600080fd5b506101da610396366004612a78565b610c90565b3480156103a757600080fd5b506101fc6103b6366004612acb565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156103f657600080fd5b5060c85460ff1661022f565b34801561040e57600080fd5b506101da61041d36600461271c565b610dee565b34801561042e57600080fd5b506101fc61043d366004612b2d565b60fc6020526000908152604090205481565b34801561045b57600080fd5b5061025461046a3660046128cd565b610e39565b6101da61047d366004612b5b565b610e52565b34801561048e57600080fd5b506000546102e19062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156104c157600080fd5b506101da6104d0366004612c2a565b610f1a565b3480156104e157600080fd5b506101da6104f03660046127d2565b61107e565b34801561050157600080fd5b5060fb546102e19073ffffffffffffffffffffffffffffffffffffffff1681565b6101da61053036600461271c565b6111a1565b34801561054157600080fd5b506101da610550366004612a78565b611287565b6101da6105633660046128e8565b6113ae565b34801561057457600080fd5b506101da610583366004612c99565b6114fb565b34801561059457600080fd5b506101da6105a3366004612cb6565b6115db565b3480156105b457600080fd5b506102546105c3366004612d3f565b6117aa565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461061f576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff84166000908152600260205260408120805461063d90612d8c565b80601f016020809104026020016040519081016040528092919081815260200182805461066990612d8c565b80156106b65780601f1061068b576101008083540402835291602001916106b6565b820191906000526020600020905b81548152906001019060200180831161069957829003601f168201915b50505050509050805184511415806106dc57508080519060200120848051906020012014155b15610713576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61071f8585858561188d565b5050505050565b6000610733833384611998565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f697000000000000000000000000000000000000000000000000000000001480610790575061079082611af9565b92915050565b60fa80546107a390612d8c565b80601f01602080910402602001604051908101604052809291908181526020018280546107cf90612d8c565b801561081c5780601f106107f15761010080835404028352916020019161081c565b820191906000526020600020905b8154815290600101906020018083116107ff57829003601f168201915b505050505081565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190612de0565b6108ec576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b15801561096157600080fd5b505af115801561071f573d6000803e3d6000fd5b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190612de0565b610a3d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610947565b610aa7868686611b90565b9350610ab7868686868686611c31565b505050505050565b60008060008686604051602001610ad7929190612dfd565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610b68908b90309086908b908b90600401612e1f565b6040805180830381865afa158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190612e7e565b92509250509550959350505050565b6000610733838384611998565b61ffff831660009081526002602052604081208054829190610be590612d8c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1190612d8c565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505090508383604051610c75929190612ea2565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190612de0565b610d58576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d90610db790869086908690600401612efb565b600060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b50505050505050565b333014610e27576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e3384848484611c46565b50505050565b600260205260009081526040902080546107a390612d8c565b60fb546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b50505050610f0e8a8a8a8a8a8a6113ae565b50505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac9190612de0565b610fe2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c906110459088908890889088908890600401612f19565b600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190612de0565b611146576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fc6020526040902054611177908390612f52565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260fc602052604090205550565b61ffff841660009081526001602052604080822090516111c2908690612f90565b908152604080516020928190038301902067ffffffffffffffff86166000908152925290205490508015806111fd5750815160208301208114155b15611234576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152600160205260408082209051611255908790612f90565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561071f85858585611c46565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113199190612de0565b61134f576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff8316600090815260026020526040902061136d9083836124a2565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516113a193929190612efb565b60405180910390a1505050565b6113b9868686611cf1565b9350600085856040516020016113d0929190612dfd565b60405160208183030381529060405290506113ee8782868686611e10565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612fac565b9050866040516114a09190612f90565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190612de0565b6115c3576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806115d3576115d0611f8b565b50565b6115d061206c565b600054610100900460ff166115f65760005460ff16156115fa565b303b155b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156116ca57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff8216611717576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611721848461212c565b84516117349060fa906020880190612544565b5060fb80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055801561071f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050505050565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015611838573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261187e9190810190613016565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a906118cf90879087908790879060040161304b565b600060405180830381600087803b1580156118e957600080fd5b505af19250505080156118fa575060015b610e33578080519060200120600160008661ffff1661ffff1681526020019081526020016000208460405161192f9190612f90565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d9061198b90869086908690869061304b565b60405180910390a1610e33565b60006119a660c85460ff1690565b15611a0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fc6020526040902054611a3e908590612f52565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260fc6020526040908190209290925560fb5491517fa9059cbb00000000000000000000000000000000000000000000000000000000815284821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af1158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190612de0565b50929392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f69700000000000000000000000000000000000000000000000000000000148061079057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610790565b6000611b9e60c85460ff1690565b15611c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b33600090815260fc602052604081208054849290611c24908490612f52565b9091555091949350505050565b600085856040516020016113d0929190612dfd565b60008082806020019051810190611c5d919061308a565b60148201519193509150611c7287828461220f565b91508073ffffffffffffffffffffffffffffffffffffffff1686604051611c999190612f90565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b6000611cff60c85460ff1690565b15611d66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60fb546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e079190612de0565b50909392505050565b61ffff851660009081526002602052604081208054611e2e90612d8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5a90612d8c565b8015611ea75780601f10611e7c57610100808354040283529160200191611ea7565b820191906000526020600020905b815481529060010190602001808311611e8a57829003601f168201915b50505050509050805160001415611eea576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490611f51908a9086908b908b908b908b906004016130d1565b6000604051808303818588803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b5050505050505050505050565b60c85460ff16611ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401611682565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60c85460ff16156120d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120423390565b73ffffffffffffffffffffffffffffffffffffffff82161580612163575073ffffffffffffffffffffffffffffffffffffffff8116155b1561219a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b600061221d60c85460ff1690565b15612284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60fb546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156122f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123179190613145565b9050828110156123fb5761232b8184612f52565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc602052604090205580156123f65760fb546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156123d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f49190612de0565b505b611e07565b60fb546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af1158015612474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124989190612de0565b5050909392505050565b8280546124ae90612d8c565b90600052602060002090601f0160209004810192826124d05760008555612534565b82601f10612507578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612534565b82800160010185558215612534579182015b82811115612534578235825591602001919060010190612519565b506125409291506125b8565b5090565b82805461255090612d8c565b90600052602060002090601f0160209004810192826125725760008555612534565b82601f1061258b57805160ff1916838001178555612534565b82800160010185558215612534579182015b8281111561253457825182559160200191906001019061259d565b5b8082111561254057600081556001016125b9565b803561ffff811681146125df57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561265a5761265a6125e4565b604052919050565b600067ffffffffffffffff82111561267c5761267c6125e4565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006126bb6126b684612662565b612613565b90508281528383830111156126cf57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126126f757600080fd5b610733838335602085016126a8565b67ffffffffffffffff811681146115d057600080fd5b6000806000806080858703121561273257600080fd5b61273b856125cd565b9350602085013567ffffffffffffffff8082111561275857600080fd5b612764888389016126e6565b94506040870135915061277682612706565b9092506060860135908082111561278c57600080fd5b50612799878288016126e6565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff811681146115d057600080fd5b80356125df816127a5565b600080604083850312156127e557600080fd5b8235915060208301356127f7816127a5565b809150509250929050565b60006020828403121561281457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461073357600080fd5b60005b8381101561285f578181015183820152602001612847565b83811115610e335750506000910152565b60008151808452612888816020860160208601612844565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107336020830184612870565b6000602082840312156128df57600080fd5b610733826125cd565b60008060008060008060c0878903121561290157600080fd5b61290a876125cd565b9550602087013567ffffffffffffffff8082111561292757600080fd5b6129338a838b016126e6565b9650604089013595506060890135915061294c826127a5565b90935060808801359061295e826127a5565b90925060a0880135908082111561297457600080fd5b5061298189828a016126e6565b9150509295509295509295565b80151581146115d057600080fd5b600080600080600060a086880312156129b457600080fd5b6129bd866125cd565b9450602086013567ffffffffffffffff808211156129da57600080fd5b6129e689838a016126e6565b955060408801359450606088013591506129ff8261298e565b90925060808701359080821115612a1557600080fd5b50612a22888289016126e6565b9150509295509295909350565b60008083601f840112612a4157600080fd5b50813567ffffffffffffffff811115612a5957600080fd5b602083019150836020828501011115612a7157600080fd5b9250929050565b600080600060408486031215612a8d57600080fd5b612a96846125cd565b9250602084013567ffffffffffffffff811115612ab257600080fd5b612abe86828701612a2f565b9497909650939450505050565b600080600060608486031215612ae057600080fd5b612ae9846125cd565b9250602084013567ffffffffffffffff811115612b0557600080fd5b612b11868287016126e6565b9250506040840135612b2281612706565b809150509250925092565b600060208284031215612b3f57600080fd5b8135610733816127a5565b803560ff811681146125df57600080fd5b6000806000806000806000806000806101408b8d031215612b7b57600080fd5b612b848b6125cd565b995060208b013567ffffffffffffffff80821115612ba157600080fd5b612bad8e838f016126e6565b9a5060408d01359950612bc260608e016127c7565b9850612bd060808e016127c7565b975060a08d0135915080821115612be657600080fd5b50612bf38d828e016126e6565b95505060c08b01359350612c0960e08c01612b4a565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215612c4257600080fd5b612c4b866125cd565b9450612c59602087016125cd565b935060408601359250606086013567ffffffffffffffff811115612c7c57600080fd5b612c8888828901612a2f565b969995985093965092949392505050565b600060208284031215612cab57600080fd5b81356107338161298e565b60008060008060808587031215612ccc57600080fd5b843567ffffffffffffffff811115612ce357600080fd5b8501601f81018713612cf457600080fd5b612d03878235602084016126a8565b9450506020850135612d14816127a5565b92506040850135612d24816127a5565b91506060850135612d34816127a5565b939692955090935050565b60008060008060808587031215612d5557600080fd5b612d5e856125cd565b9350612d6c602086016125cd565b92506040850135612d7c816127a5565b9396929550929360600135925050565b600181811c90821680612da057607f821691505b60208210811415612dda577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612df257600080fd5b81516107338161298e565b604081526000612e106040830185612870565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000612e5860a0830186612870565b84151560608401528281036080840152612e728185612870565b98975050505050505050565b60008060408385031215612e9157600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8416815260406020820152600061187e604083018486612eb2565b600061ffff808816835280871660208401525084604083015260806060830152612f47608083018486612eb2565b979650505050505050565b600082821015612f8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b60008251612fa2818460208701612844565b9190910192915050565b600060208284031215612fbe57600080fd5b815161073381612706565b600082601f830112612fda57600080fd5b8151612fe86126b682612662565b818152846020838601011115612ffd57600080fd5b61300e826020830160208701612844565b949350505050565b60006020828403121561302857600080fd5b815167ffffffffffffffff81111561303f57600080fd5b61300e84828501612fc9565b61ffff851681526080602082015260006130686080830186612870565b67ffffffffffffffff851660408401528281036060840152612f478185612870565b6000806040838503121561309d57600080fd5b825167ffffffffffffffff8111156130b457600080fd5b6130c085828601612fc9565b925050602083015190509250929050565b61ffff8716815260c0602082015260006130ee60c0830188612870565b82810360408401526131008188612870565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a085015290506131388185612870565b9998505050505050505050565b60006020828403121561315757600080fd5b505191905056fea2646970667358221220c3823e1ea4df103d8050da6be7407dae1e0bd7aed397a107d2bed42aca763ded64736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106101b55760003560e01c806366ad5c8a116100ec578063ceb76b551161008a578063eed33cef11610064578063eed33cef14610555578063f187892214610568578063f34822b414610588578063f5ecbdbc146105a857600080fd5b8063ceb76b55146104f5578063d1deba1f14610522578063eb8d72b71461053557600080fd5b806385edd8ae116100c657806385edd8ae1461046f578063b353aaa714610482578063cbed8b9c146104b5578063cbf9b84b146104d557600080fd5b806366ad5c8a1461040257806370a08231146104225780637533d7881461044f57600080fd5b80631b0c24d5116101595780633d8b38f6116101335780633d8b38f61461035b57806342d65a8d1461037b5780635b8c41e61461039b5780635c975abb146103ea57600080fd5b80631b0c24d5146102b45780632a205e3d146103065780633576f6cc1461033b57600080fd5b806306fdde031161019557806306fdde031461023f57806307e0db171461026157806310ddb1371461028157806310f95825146102a157600080fd5b80621d3567146101ba578062f714ce146101dc57806301ffc9a71461020f575b600080fd5b3480156101c657600080fd5b506101da6101d536600461271c565b6105c8565b005b3480156101e857600080fd5b506101fc6101f73660046127d2565b610726565b6040519081526020015b60405180910390f35b34801561021b57600080fd5b5061022f61022a366004612802565b61073a565b6040519015158152602001610206565b34801561024b57600080fd5b50610254610796565b60405161020691906128ba565b34801561026d57600080fd5b506101da61027c3660046128cd565b610824565b34801561028d57600080fd5b506101da61029c3660046128cd565b610975565b6101da6102af3660046128e8565b610a9c565b3480156102c057600080fd5b506003546102e19073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b34801561031257600080fd5b5061032661032136600461299c565b610abf565b60408051928352602083019190915201610206565b34801561034757600080fd5b506101fc6103563660046127d2565b610bb7565b34801561036757600080fd5b5061022f610376366004612a78565b610bc4565b34801561038757600080fd5b506101da610396366004612a78565b610c90565b3480156103a757600080fd5b506101fc6103b6366004612acb565b6001602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b3480156103f657600080fd5b5060c85460ff1661022f565b34801561040e57600080fd5b506101da61041d36600461271c565b610dee565b34801561042e57600080fd5b506101fc61043d366004612b2d565b60fc6020526000908152604090205481565b34801561045b57600080fd5b5061025461046a3660046128cd565b610e39565b6101da61047d366004612b5b565b610e52565b34801561048e57600080fd5b506000546102e19062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b3480156104c157600080fd5b506101da6104d0366004612c2a565b610f1a565b3480156104e157600080fd5b506101da6104f03660046127d2565b61107e565b34801561050157600080fd5b5060fb546102e19073ffffffffffffffffffffffffffffffffffffffff1681565b6101da61053036600461271c565b6111a1565b34801561054157600080fd5b506101da610550366004612a78565b611287565b6101da6105633660046128e8565b6113ae565b34801561057457600080fd5b506101da610583366004612c99565b6114fb565b34801561059457600080fd5b506101da6105a3366004612cb6565b6115db565b3480156105b457600080fd5b506102546105c3366004612d3f565b6117aa565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331461061f576040517ff1cbb56700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff84166000908152600260205260408120805461063d90612d8c565b80601f016020809104026020016040519081016040528092919081815260200182805461066990612d8c565b80156106b65780601f1061068b576101008083540402835291602001916106b6565b820191906000526020600020905b81548152906001019060200180831161069957829003601f168201915b50505050509050805184511415806106dc57508080519060200120848051906020012014155b15610713576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61071f8585858561188d565b5050505050565b6000610733833384611998565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f697000000000000000000000000000000000000000000000000000000001480610790575061079082611af9565b92915050565b60fa80546107a390612d8c565b80601f01602080910402602001604051908101604052809291908181526020018280546107cf90612d8c565b801561081c5780601f106107f15761010080835404028352916020019161081c565b820191906000526020600020905b8154815290600101906020018083116107ff57829003601f168201915b505050505081565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b69190612de0565b6108ec576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906307e0db17906024015b600060405180830381600087803b15801561096157600080fd5b505af115801561071f573d6000803e3d6000fd5b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190612de0565b610a3d576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff831660048201526201000090910473ffffffffffffffffffffffffffffffffffffffff16906310ddb13790602401610947565b610aa7868686611b90565b9350610ab7868686868686611c31565b505050505050565b60008060008686604051602001610ad7929190612dfd565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290526000547f40a7bb1000000000000000000000000000000000000000000000000000000000835290925062010000900473ffffffffffffffffffffffffffffffffffffffff16906340a7bb1090610b68908b90309086908b908b90600401612e1f565b6040805180830381865afa158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba89190612e7e565b92509250509550959350505050565b6000610733838384611998565b61ffff831660009081526002602052604081208054829190610be590612d8c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c1190612d8c565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505090508383604051610c75929190612ea2565b60405180910390208180519060200120149150509392505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610cfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d229190612de0565b610d58576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff16906342d65a8d90610db790869086908690600401612efb565b600060405180830381600087803b158015610dd157600080fd5b505af1158015610de5573d6000803e3d6000fd5b50505050505050565b333014610e27576040517f48f5c3ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e3384848484611c46565b50505050565b600260205260009081526040902080546107a390612d8c565b60fb546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018a90526064810186905260ff8516608482015260a4810184905260c4810183905273ffffffffffffffffffffffffffffffffffffffff9091169063d505accf9060e401600060405180830381600087803b158015610ee857600080fd5b505af1158015610efc573d6000803e3d6000fd5b50505050610f0e8a8a8a8a8a8a6113ae565b50505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015610f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fac9190612de0565b610fe2576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063cbed8b9c906110459088908890889088908890600401612f19565b600060405180830381600087803b15801561105f57600080fd5b505af1158015611073573d6000803e3d6000fd5b505050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156110ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111109190612de0565b611146576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116600090815260fc6020526040902054611177908390612f52565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260fc602052604090205550565b61ffff841660009081526001602052604080822090516111c2908690612f90565b908152604080516020928190038301902067ffffffffffffffff86166000908152925290205490508015806111fd5750815160208301208114155b15611234576040517f7c6953f900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff85166000908152600160205260408082209051611255908790612f90565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561071f85858585611c46565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113199190612de0565b61134f576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61ffff8316600090815260026020526040902061136d9083836124a2565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab8383836040516113a193929190612efb565b60405180910390a1505050565b6113b9868686611cf1565b9350600085856040516020016113d0929190612dfd565b60405160208183030381529060405290506113ee8782868686611e10565b600080546040517f7a14574800000000000000000000000000000000000000000000000000000000815261ffff8a1660048201523060248201526201000090910473ffffffffffffffffffffffffffffffffffffffff1690637a14574890604401602060405180830381865afa15801561146c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114909190612fac565b9050866040516114a09190612f90565b6040805191829003822088835267ffffffffffffffff841660208401529161ffff8b169133917f024797cc77ce15dc717112d54fb1df125fdfd8c81344fb046c5e074427ce1543910160405180910390a45050505050505050565b6003546040517f521d4de900000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff9091169063521d4de990602401602060405180830381865afa158015611569573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158d9190612de0565b6115c3576040517f99e120bc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806115d3576115d0611f8b565b50565b6115d061206c565b600054610100900460ff166115f65760005460ff16156115fa565b303b155b61168b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff161580156116ca57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b73ffffffffffffffffffffffffffffffffffffffff8216611717576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611721848461212c565b84516117349060fa906020880190612544565b5060fb80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055801561071f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555050505050565b6000546040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff8087166004830152851660248201523060448201526064810183905260609162010000900473ffffffffffffffffffffffffffffffffffffffff169063f5ecbdbc90608401600060405180830381865afa158015611838573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261187e9190810190613016565b95945050505050565b3b151590565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a906118cf90879087908790879060040161304b565b600060405180830381600087803b1580156118e957600080fd5b505af19250505080156118fa575060015b610e33578080519060200120600160008661ffff1661ffff1681526020019081526020016000208460405161192f9190612f90565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d9061198b90869086908690869061304b565b60405180910390a1610e33565b60006119a660c85460ff1690565b15611a0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260fc6020526040902054611a3e908590612f52565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260fc6020526040908190209290925560fb5491517fa9059cbb00000000000000000000000000000000000000000000000000000000815284821660048201526024810187905291169063a9059cbb906044016020604051808303816000875af1158015611acc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af09190612de0565b50929392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5110f69700000000000000000000000000000000000000000000000000000000148061079057507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610790565b6000611b9e60c85460ff1690565b15611c05576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b33600090815260fc602052604081208054849290611c24908490612f52565b9091555091949350505050565b600085856040516020016113d0929190612dfd565b60008082806020019051810190611c5d919061308a565b60148201519193509150611c7287828461220f565b91508073ffffffffffffffffffffffffffffffffffffffff1686604051611c999190612f90565b6040805191829003822085835267ffffffffffffffff891660208401529161ffff8b16917f64e10c37f404d128982dce114f5d233c14c5c7f6d8db93099e3d99dacb9e27ba910160405180910390a450505050505050565b6000611cff60c85460ff1690565b15611d66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60fb546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015611de3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e079190612de0565b50909392505050565b61ffff851660009081526002602052604081208054611e2e90612d8c565b80601f0160208091040260200160405190810160405280929190818152602001828054611e5a90612d8c565b8015611ea75780601f10611e7c57610100808354040283529160200191611ea7565b820191906000526020600020905b815481529060010190602001808311611e8a57829003601f168201915b50505050509050805160001415611eea576040517f8154374b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546040517fc58031000000000000000000000000000000000000000000000000000000000081526201000090910473ffffffffffffffffffffffffffffffffffffffff169063c5803100903490611f51908a9086908b908b908b908b906004016130d1565b6000604051808303818588803b158015611f6a57600080fd5b505af1158015611f7e573d6000803e3d6000fd5b5050505050505050505050565b60c85460ff16611ff7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401611682565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60c85460ff16156120d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60c880547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586120423390565b73ffffffffffffffffffffffffffffffffffffffff82161580612163575073ffffffffffffffffffffffffffffffffffffffff8116155b1561219a576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff94851602179055600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909216179055565b600061221d60c85460ff1690565b15612284576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401611682565b60fb546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156122f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123179190613145565b9050828110156123fb5761232b8184612f52565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260fc602052604090205580156123f65760fb546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156123d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f49190612de0565b505b611e07565b60fb546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063a9059cbb906044016020604051808303816000875af1158015612474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124989190612de0565b5050909392505050565b8280546124ae90612d8c565b90600052602060002090601f0160209004810192826124d05760008555612534565b82601f10612507578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612534565b82800160010185558215612534579182015b82811115612534578235825591602001919060010190612519565b506125409291506125b8565b5090565b82805461255090612d8c565b90600052602060002090601f0160209004810192826125725760008555612534565b82601f1061258b57805160ff1916838001178555612534565b82800160010185558215612534579182015b8281111561253457825182559160200191906001019061259d565b5b8082111561254057600081556001016125b9565b803561ffff811681146125df57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561265a5761265a6125e4565b604052919050565b600067ffffffffffffffff82111561267c5761267c6125e4565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60006126bb6126b684612662565b612613565b90508281528383830111156126cf57600080fd5b828260208301376000602084830101529392505050565b600082601f8301126126f757600080fd5b610733838335602085016126a8565b67ffffffffffffffff811681146115d057600080fd5b6000806000806080858703121561273257600080fd5b61273b856125cd565b9350602085013567ffffffffffffffff8082111561275857600080fd5b612764888389016126e6565b94506040870135915061277682612706565b9092506060860135908082111561278c57600080fd5b50612799878288016126e6565b91505092959194509250565b73ffffffffffffffffffffffffffffffffffffffff811681146115d057600080fd5b80356125df816127a5565b600080604083850312156127e557600080fd5b8235915060208301356127f7816127a5565b809150509250929050565b60006020828403121561281457600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461073357600080fd5b60005b8381101561285f578181015183820152602001612847565b83811115610e335750506000910152565b60008151808452612888816020860160208601612844565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107336020830184612870565b6000602082840312156128df57600080fd5b610733826125cd565b60008060008060008060c0878903121561290157600080fd5b61290a876125cd565b9550602087013567ffffffffffffffff8082111561292757600080fd5b6129338a838b016126e6565b9650604089013595506060890135915061294c826127a5565b90935060808801359061295e826127a5565b90925060a0880135908082111561297457600080fd5b5061298189828a016126e6565b9150509295509295509295565b80151581146115d057600080fd5b600080600080600060a086880312156129b457600080fd5b6129bd866125cd565b9450602086013567ffffffffffffffff808211156129da57600080fd5b6129e689838a016126e6565b955060408801359450606088013591506129ff8261298e565b90925060808701359080821115612a1557600080fd5b50612a22888289016126e6565b9150509295509295909350565b60008083601f840112612a4157600080fd5b50813567ffffffffffffffff811115612a5957600080fd5b602083019150836020828501011115612a7157600080fd5b9250929050565b600080600060408486031215612a8d57600080fd5b612a96846125cd565b9250602084013567ffffffffffffffff811115612ab257600080fd5b612abe86828701612a2f565b9497909650939450505050565b600080600060608486031215612ae057600080fd5b612ae9846125cd565b9250602084013567ffffffffffffffff811115612b0557600080fd5b612b11868287016126e6565b9250506040840135612b2281612706565b809150509250925092565b600060208284031215612b3f57600080fd5b8135610733816127a5565b803560ff811681146125df57600080fd5b6000806000806000806000806000806101408b8d031215612b7b57600080fd5b612b848b6125cd565b995060208b013567ffffffffffffffff80821115612ba157600080fd5b612bad8e838f016126e6565b9a5060408d01359950612bc260608e016127c7565b9850612bd060808e016127c7565b975060a08d0135915080821115612be657600080fd5b50612bf38d828e016126e6565b95505060c08b01359350612c0960e08c01612b4a565b92506101008b013591506101208b013590509295989b9194979a5092959850565b600080600080600060808688031215612c4257600080fd5b612c4b866125cd565b9450612c59602087016125cd565b935060408601359250606086013567ffffffffffffffff811115612c7c57600080fd5b612c8888828901612a2f565b969995985093965092949392505050565b600060208284031215612cab57600080fd5b81356107338161298e565b60008060008060808587031215612ccc57600080fd5b843567ffffffffffffffff811115612ce357600080fd5b8501601f81018713612cf457600080fd5b612d03878235602084016126a8565b9450506020850135612d14816127a5565b92506040850135612d24816127a5565b91506060850135612d34816127a5565b939692955090935050565b60008060008060808587031215612d5557600080fd5b612d5e856125cd565b9350612d6c602086016125cd565b92506040850135612d7c816127a5565b9396929550929360600135925050565b600181811c90821680612da057607f821691505b60208210811415612dda577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208284031215612df257600080fd5b81516107338161298e565b604081526000612e106040830185612870565b90508260208301529392505050565b61ffff8616815273ffffffffffffffffffffffffffffffffffffffff8516602082015260a060408201526000612e5860a0830186612870565b84151560608401528281036080840152612e728185612870565b98975050505050505050565b60008060408385031215612e9157600080fd5b505080516020909101519092909150565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b61ffff8416815260406020820152600061187e604083018486612eb2565b600061ffff808816835280871660208401525084604083015260806060830152612f47608083018486612eb2565b979650505050505050565b600082821015612f8b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500390565b60008251612fa2818460208701612844565b9190910192915050565b600060208284031215612fbe57600080fd5b815161073381612706565b600082601f830112612fda57600080fd5b8151612fe86126b682612662565b818152846020838601011115612ffd57600080fd5b61300e826020830160208701612844565b949350505050565b60006020828403121561302857600080fd5b815167ffffffffffffffff81111561303f57600080fd5b61300e84828501612fc9565b61ffff851681526080602082015260006130686080830186612870565b67ffffffffffffffff851660408401528281036060840152612f478185612870565b6000806040838503121561309d57600080fd5b825167ffffffffffffffff8111156130b457600080fd5b6130c085828601612fc9565b925050602083015190509250929050565b61ffff8716815260c0602082015260006130ee60c0830188612870565b82810360408401526131008188612870565b73ffffffffffffffffffffffffffffffffffffffff87811660608601528616608085015283810360a085015290506131388185612870565b9998505050505050505050565b60006020828403121561315757600080fd5b505191905056fea2646970667358221220c3823e1ea4df103d8050da6be7407dae1e0bd7aed397a107d2bed42aca763ded64736f6c634300080c0033",
  "devdoc": {
    "author": "Angle Labs, Inc., forked from https://github.com/LayerZero-Labs/solidity-examples/blob/main/contracts/token/oft/OFT.sol",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "params": {
          "_adapterParams": "flexible bytes array to indicate messaging adapter services in L0",
          "_amount": "amount of the tokens to transfer",
          "_dstChainId": "L0 defined chain id to send tokens too",
          "_toAddress": "dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain",
          "_useZro": "indicates to use zro to pay L0 fees"
        }
      },
      "initialize(string,address,address,address)": {
        "params": {
          "_coreBorrow": "Address of the `CoreBorrow` contract used for access control",
          "_lzEndpoint": "Layer zero endpoint to pass messages",
          "_name": "Name of the token corresponding to this contract"
        }
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "details": "public for the needs of try / catch but effectively internal",
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "pauseSendTokens(bool)": {
        "params": {
          "pause": "Future pause status"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "params": {
          "_nonce": "Nounce of the message",
          "_payload": "Data: recipient address and amount",
          "_srcAddress": "Sender of the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "params": {
          "_adapterParams": "is a flexible bytes array to indicate messaging adapter services",
          "_amount": "the quantity of tokens in wei",
          "_dstChainId": "the destination chain identifier",
          "_refundAddress": "the address LayerZero refunds if too much message fee is sent",
          "_toAddress": "can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "set to address(0x0) if not paying in ZRO (LayerZero Token)"
        }
      },
      "sendCredit(uint16,bytes,uint256,address,address,bytes)": {
        "params": {
          "_adapterParams": "is a flexible bytes array to indicate messaging adapter services",
          "_amount": "the quantity of credit to send in wei",
          "_dstChainId": "the destination chain identifier",
          "_refundAddress": "the address LayerZero refunds if too much message fee is sent",
          "_toAddress": "can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "set to address(0x0) if not paying in ZRO (LayerZero Token)"
        }
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "details": "The `v`, `r`, and `s` parameters are used as signature data",
        "params": {
          "_adapterParams": "Flexible bytes array to indicate messaging adapter services",
          "_amount": "Quantity of tokens in wei",
          "_dstChainId": "The destination chain identifier",
          "_refundAddress": "Address LayerZero refunds if too much message fee is sent",
          "_toAddress": "Can be any size depending on the `dstChainId`.",
          "_zroPaymentAddress": "Set to address(0x0) if not paying in ZRO (LayerZero Token)",
          "deadline": "Deadline parameter for the signature to be valid"
        }
      },
      "setTrustedRemote(uint16,bytes)": {
        "details": "Used for both receiving and sending messageThere can only be one trusted source per chainAllows owner to set it multiple times.",
        "params": {
          "_srcAddress": "Address on the source chain",
          "_srcChainId": "ChainId of the source chain - LayerZero standard"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "sweep(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw from balance",
          "recipient": "Address to withdraw from"
        }
      },
      "withdraw(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address to send the canonical token to"
        },
        "returns": {
          "_0": "The amount of canonical token sent"
        }
      },
      "withdrawFor(uint256,address)": {
        "params": {
          "amount": "Amount to withdraw",
          "recipient": "Address to withdraw for"
        },
        "returns": {
          "_0": "The amount of canonical token sent"
        }
      }
    },
    "title": "LayerZeroBridgeERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Maps an address to the amount of token bridged but not received"
      },
      "canonicalToken()": {
        "notice": "Address of the bridgeable token"
      },
      "coreBorrow()": {
        "notice": "Reference to the `CoreBorrow` contract to fetch access control"
      },
      "estimateSendFee(uint16,bytes,uint256,bool,bytes)": {
        "notice": "Estimates send token `_tokenId` to (`_dstChainId`, `_toAddress`)"
      },
      "failedMessages(uint16,bytes,uint64)": {
        "notice": "Maps chainIds to failed messages to retry them"
      },
      "forceResumeReceive(uint16,bytes)": {
        "notice": "Unpauses the receive functionalities"
      },
      "getConfig(uint16,uint16,address,uint256)": {
        "notice": "Fetches the default LZ config"
      },
      "initialize(string,address,address,address)": {
        "notice": "Initializes the contract"
      },
      "isTrustedRemote(uint16,bytes)": {
        "notice": "Checks if the `_srcAddress` corresponds to the trusted source"
      },
      "lzEndpoint()": {
        "notice": "Layer Zero endpoint"
      },
      "lzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Receives a message from the LZ endpoint and process it"
      },
      "name()": {
        "notice": "Name of the contract for indexing purposes"
      },
      "nonblockingLzReceive(uint16,bytes,uint64,bytes)": {
        "notice": "Handles message receptions in a non blocking way"
      },
      "pauseSendTokens(bool)": {
        "notice": "Pauses bridging through the contract"
      },
      "retryMessage(uint16,bytes,uint64,bytes)": {
        "notice": "Retries a message that previously failed and was stored"
      },
      "send(uint16,bytes,uint256,address,address,bytes)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "sendCredit(uint16,bytes,uint256,address,address,bytes)": {
        "notice": "Sends `_amount` amount of credit to (`_dstChainId`, `_toAddress`)"
      },
      "sendWithPermit(uint16,bytes,uint256,address,address,bytes,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sends `_amount` amount of token to (`_dstChainId`, `_toAddress`)"
      },
      "setConfig(uint16,uint16,uint256,bytes)": {
        "notice": "Overrides the default LZ config"
      },
      "setReceiveVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setSendVersion(uint16)": {
        "notice": "Overrides the default LZ config"
      },
      "setTrustedRemote(uint16,bytes)": {
        "notice": "Sets the corresponding address on an other chain."
      },
      "sweep(uint256,address)": {
        "notice": "Decreases the balance of an address"
      },
      "trustedRemoteLookup(uint16)": {
        "notice": "Maps chainIds to their OFT address"
      },
      "withdraw(uint256,address)": {
        "notice": "Withdraws amount of canonical token from the `msg.sender` balance and sends it to the recipient"
      },
      "withdrawFor(uint256,address)": {
        "notice": "Withdraws amount of `token` from the contract and sends it to the recipient"
      }
    },
    "notice": "Contract to be deployed on Ethereum for bridging an ERC20 token (ANGLE for instance) using a bridge intermediate token and LayerZero",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7003,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "lzEndpoint",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(ILayerZeroEndpoint)8354"
      },
      {
        "astId": 7012,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "failedMessages",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 7017,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 7020,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "coreBorrow",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 7499,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 2245,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "50",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7846,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "100",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1383,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "150",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 94,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "_paused",
        "offset": 0,
        "slot": "200",
        "type": "t_bool"
      },
      {
        "astId": 185,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6191,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "name",
        "offset": 0,
        "slot": "250",
        "type": "t_string_storage"
      },
      {
        "astId": 6195,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "canonicalToken",
        "offset": 0,
        "slot": "251",
        "type": "t_contract(IERC20)3462"
      },
      {
        "astId": 6200,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "balanceOf",
        "offset": 0,
        "slot": "252",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6552,
        "contract": "contracts/bridgeERC20/layerZero/LayerZeroBridgeERC20.sol:LayerZeroBridgeERC20",
        "label": "__gap",
        "offset": 0,
        "slot": "253",
        "type": "t_array(t_uint256)47_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3462": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroEndpoint)8354": {
        "encoding": "inplace",
        "label": "contract ILayerZeroEndpoint",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}